/*
 * Copyright 2013 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// JavaCC grammar specification for the Soy type expressions.
//
// @author Talin


// =================================================================================================
// Options
// =================================================================================================

options {
  JDK_VERSION = "1.7";
  STATIC = false;
  UNICODE_INPUT = true;
}


// =================================================================================================
// Parser class
// =================================================================================================

PARSER_BEGIN(TypeParser)

package com.google.template.soy.types.parse;

import com.google.common.collect.Maps;
import com.google.template.soy.types.SoyType;
import com.google.template.soy.types.SoyTypeRegistry;
import com.google.template.soy.types.aggregate.ListType;
import com.google.template.soy.types.aggregate.MapType;
import com.google.template.soy.types.aggregate.UnionType;
import com.google.template.soy.types.aggregate.RecordType;
import com.google.template.soy.types.primitive.UnknownType;

import java.io.StringReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;

/**
 * This parser's specification is in TypeParser.jj, which is read by JavaCC and transformed
 * into TypeParser.java. To modify this parser, please edit TypeParser.jj. Do not edit
 * TypeParser.java directly.
 *
 * <p> Important: Do not use outside of Soy code (treat as superpackage-private).
 *
 */
public class TypeParser {

  /** Private constant used by some parse rules. */
  private static final List<SoyType> EMPTY_TYPE_ARGS = Collections.emptyList();

  /** Node id generator for the tree being built. */
  private SoyTypeRegistry typeRegistry;

  /**
   * Constructor that takes a string input.
   * @param input The input to parse.
   * @param typeRegistry The type registry.
   */
  public TypeParser(String input, SoyTypeRegistry typeRegistry) {
    this(new StringReader(input));
    this.typeRegistry = typeRegistry;
  }

  /**
   * Attempts to parse the input as a type expression.
   * @throws TokenMgrError When the input has a token error.
   * @throws ParseException When the input has a parse error.
   */
  public SoyType parseTypeExpression() throws TokenMgrError, ParseException {
    return TypeExpr();
  }

  /**
   * Attempts to parse the input as a type declaration.
   * @throws TokenMgrError When the input has a token error.
   * @throws ParseException When the input has a parse error.
   */
  public SoyType parseTypeDeclaration() throws TokenMgrError, ParseException {
    return TypeDecl();
  }
}

PARSER_END(TypeParser)


// =================================================================================================
// Tokens
// =================================================================================================


// Delimiters.
TOKEN:
{
  < LANGLE: "<" >
|
  < RANGLE: ">" >
|
  < LBRACKET: "[" >
|
  < RBRACKET: "]" >
|
  < COMMA: "," >
|
  < VBAR: "|" >
|
  < COLON: ":" >
|
  < DOT: "." >
|
  < QMARK: "?" >
}


// Names of built-in generic types.
TOKEN:
{
  < GENERIC_LIST: "list" >
|
  < GENERIC_MAP: "map" >
}


// Qualified type names.
TOKEN:
{
  < IDENT: ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","_","0"-"9"] )* >
}


// Skip unmatched whitespace.
SKIP:
{
  < WS: " " | "\t" | "\n" | "\r" | "\r\n" >
}


// =================================================================================================
// Grammar
// =================================================================================================


/**
 * TypeDecl -> TypeExpr EOF
 */
private SoyType TypeDecl() :
{
  SoyType type;
}
{
  type = TypeExpr()
  <EOF>

  { return type; }
}


/**
 * TypeExpr -> UnionTypeExpr
 */
private SoyType TypeExpr() :
{
  SoyType type;
}
{
  type = UnionTypeExpr()

  { return type; }
}


/**
 * UnionTypeExpr -> Primary ("|" Primary)*
 */
private SoyType UnionTypeExpr() :
{
  SoyType type;
}
{
  { List<SoyType> members = new ArrayList<SoyType>(); }

  type = Primary()
  { members.add(type); }

  (
    <VBAR>
    type = Primary()
    { members.add(type); }
  )*

  { return UnionType.of(members); }
}


/**
 * Primary -> TypeName | ListType | MapType
 */
private SoyType Primary() :
{
  SoyType type;
}
{
  (
    type = TypeName()
  |
    type = UnknownType()
  |
    type = ListType()
  |
    type = MapType()
  |
    type = RecordType()
  )

  { return type; }
}


/**
 * ListType -> "list" ( "<" TypeList ">" )?
 *
 * Note: At some point, we may want to support generalized generic types,
 * rather than having special parsing rules just for list and map types.
 * When that happens, we'll want these types to be templates that are
 * registered in the type registry, and thus treated like any other generic
 * type. We'll also want to allow any type name to be followed by type args.
 *
 * (We can't do this now because there's no way to represent an unbound
 * template parameter in the current type system, and thus there's no way to
 * represent a list or map that has not yet been parametrized.)
 */
private SoyType ListType() :
{
  List<SoyType> typeArgs = EMPTY_TYPE_ARGS;
}
{
  <GENERIC_LIST>

  (
    <LANGLE>
    typeArgs = TypeList()
    <RANGLE>
  )?

  { if (typeArgs.size() == 1) {
      return typeRegistry.getOrCreateListType(typeArgs.get(0));
    } else {
      throw new ParseException("Expected 1 type parameter for type 'list', not " + typeArgs.size());
    }
  }
}


/**
 * MapType -> "map" ( "<" TypeList ">" )?
 */
private SoyType MapType() :
{
  List<SoyType> typeArgs = EMPTY_TYPE_ARGS;
}
{
  <GENERIC_MAP>

  (
    <LANGLE>
    typeArgs = TypeList()
    <RANGLE>
  )?

  { if (typeArgs.size() != 2) {
      throw new ParseException("Expected 2 type parameters for type 'map', not " + typeArgs.size());
    }
    return typeRegistry.getOrCreateMapType(typeArgs.get(0), typeArgs.get(1));
  }
}


/**
 * RecordType -> "{" ( RecordField ( "," RecordField )* )? "}"
 */
private SoyType RecordType() :
{
  Map<String, SoyType> fields = Maps.newHashMap();
}
{
  <LBRACKET>

  (
    RecordField(fields)

    (
      <COMMA>
      RecordField(fields)
    )*

  )?

  <RBRACKET>

  {
   return typeRegistry.getOrCreateRecordType(fields);
  }
}


/**
 * RecordField -> IDENT ":" TypeExpr
 */
private void RecordField(Map<String, SoyType> fields) :
{
  Token fieldName;
  SoyType fieldType;
}
{
  fieldName = <IDENT>
  <COLON>
  fieldType = TypeExpr()

  {
    if (fields.containsKey(fieldName.image)) {
      throw new ParseException("Duplicate field definition for record: " + fieldName.image);
    }
    fields.put(fieldName.image, fieldType);
  }
}


/**
 * TypeName -> DOTTED_IDENT
 */
private SoyType TypeName() :
{
  String ident;
}
{
  { SoyType typeName; }

  ident = DottedIdent()
  {
    typeName = typeRegistry.getType(ident);
    if (typeName == null) {
      throw new ParseException("Unknown type '" + ident + "'.");
    }
  }

  (
    <LANGLE>
    {
      throw new ParseException(
          "Template parameters not allowed for type ' " + ident + "'");
    }
  )?

  { return typeName; }
}


/**
 * UnknownType -> QMARK
 */
private SoyType UnknownType() :
{}
{
  <QMARK>
  { return UnknownType.getInstance(); }
}


/**
 * DottedIdent -> <IDENT> ( (<WS>)* "." (<WS>)* <IDENT> )* >
 */
private String DottedIdent() :
{
  StringBuilder sb = new StringBuilder();
  Token ident;
}
{
  ident = <IDENT>
  {
    sb.append(ident.image);
  }

  (
    <DOT>
    ident = <IDENT>
    {
      sb.append('.');
      sb.append(ident.image);
    }
  )*

  { return sb.toString(); }
}


/**
 * TypeList -> TypeExpr ("," TypeExpr)
 */
private List<SoyType> TypeList() :
{
  SoyType type;
}
{
  { List<SoyType> args = new ArrayList<SoyType>(); }

  type = TypeExpr()
  { args.add(type); }

  (
    <COMMA>
    type = TypeExpr()
    { args.add(type); }
  )*

  { return args; }
}
